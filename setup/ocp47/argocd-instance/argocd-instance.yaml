apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: openshift-gitops-cntk
spec:
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
    service:
      type: ''
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  resourceCustomizations: |
    argoproj.io/Application:
      ignoreDifferences: |
        jsonPointers:
        - /spec/source/targetRevision
        - /spec/source/repoURL
    argoproj.io/AppProject:
      ignoreDifferences: |
        jsonPointers:
        - /spec/sourceRepos
    operators.coreos.com/OperatorGroup:
      ignoreDifferences: |
        jsonPointers:
        - /metadata/annotations/olm.providedAPIs
    operators.coreos.com/InstallPlan:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
            else
              hs.status = "Progressing"
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        return hs
    operators.coreos.com/Subscription:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.installedCSV ~= nil then
            hs.status = "Healthy"
            hs.message = "CSV Installed"
            if obj.status.state ~= nil then
              hs.message = obj.status.state
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        if obj.status.state ~= nil then
          hs.message = obj.status.state
        end
        return hs
    operator.ibm.com/CommonService:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if obj.status.phase == "Succeeded" then
              hs.status = "Healthy"
            else
              hs.status = "Progressing"
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        return hs
    mq.ibm.com/QueueManager:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if obj.status.phase == "Running" then
              hs.status = "Healthy"
            else
              hs.status = "Progressing"
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        return hs
    cpd.ibm.com/Ibmcpd:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.controlPlaneStatus == "Completed" then
            hs.status = "Healthy"
            hs.message = "Control Plane is provisioned"
            return hs
          end
          if obj.status.controlPlaneStatus == "Failed" then
            hs.status = "Degraded"
            hs.message = "Control Plane provisioning has failed"
            return hs
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for control plane to finish provisioning"
        return hs
    zen.cpd.ibm.com/ZenService:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.zenStatus == "Completed" then
            hs.status = "Healthy"
            hs.message = "Zen Service is provisioned"
            return hs
          end
          if obj.status.zenStatus == "Failed" then
            hs.status = "Degraded"
            hs.message = "Zen Service provisioning has failed"
            return hs
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for common services to finish provisioning"
        return hs    
    ws.cpd.ibm.com/WS:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.wsStatus == "Completed" then
            hs.status = "Healthy"
            hs.message = "Watson Studio is provisioned"
            return hs
          end
          if obj.status.wsStatus == "Failed" then
            hs.status = "Degraded"
            hs.message = "Watson Studio provisioning has failed"
            return hs
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for Watson Studio to finish provisioning"
        return hs    
      cpd.ibm.com/CCS:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.ccsStatus == "Completed" then
            hs.status = "Healthy"
            hs.message = "Common Core Services is provisioned"
            return hs
          end
          if obj.status.ccsStatus == "Failed" then
            hs.status = "Degraded"
            hs.message = "Common Core Services provisioning has failed"
            return hs
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for Common Core Services to finish provisioning"
        return hs                
      scheduler.spectrumcomputing.ibm.com/Scheduling:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.cpd-schedulingStatus == "Completed" then
            hs.status = "Healthy"
            hs.message = "CPD Scheduler is provisioned"
            return hs
          end
          if obj.status.cpd-schedulingStatus == "Failed" then
            hs.status = "Degraded"
            hs.message = "CPD Scheduler provisioning has failed"
            return hs
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for CPD Scheduler to finish provisioning"
        return hs                                                                                                                     
  applicationSet:
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  rbac: {}
  repo:
    resources:
      limits:
        cpu: '1'
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  dex:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: '2'
        memory: 4Gi
      requests:
        cpu: 250m
        memory: 1Gi